/**
 * Receives the top logprobs for each token in a message and associates it with the active message.
 *
 * Ensure the active message has been updated and rendered before calling this function
 * or the logprobs data will be saved to the wrong message.
 *
 * Callers:
 * - Generate:onSuccess via saveLogprobsForActiveMessage, for non-streaming text completion
 * - StreamingProcessor:onFinishStreaming, for streaming text completion
 * - sendOpenAIRequest, for non-streaming chat completion
 *
 * @param {TokenLogprobs[]} logprobs - array of logprobs data for each token
 * @param {string | null} continueFrom  - for 'continue' generations, the prompt
 */
export function saveLogprobsForActiveMessage(logprobs: TokenLogprobs[], continueFrom: string | null): void;
export function initLogprobs(): void;
/**
 * - (token, logprob)
 */
export type Candidate = [string, number];
/**
 * - Array of DOM nodes
 */
export type NodeArray = (Node | JQuery<Text> | JQuery<HTMLElement>)[];
/**
 * Logprob data for a single message
 */
export type MessageLogprobData = {
    /**
     * - timestamp of when the message was generated
     */
    created: number;
    /**
     * - hash of the message object
     */
    hash: number;
    /**
     * - ID of the source message
     */
    messageId: number;
    /**
     * - ID of the source swipe on the source message
     */
    swipeId: number;
    /**
     * - API used to generate the message
     */
    api: string;
    /**
     * Logprob data for each token, by
     * its index in the message
     */
    messageLogprobs: TokenLogprobs[];
    /**
     * - the 'continue' prefix used to
     * generate the message, if any
     */
    continueFrom: string | null;
};
/**
 * Logprob data for a single token
 */
export type TokenLogprobs = {
    /**
     * - A token generated by the model
     */
    token: string;
    /**
     * - Array of top candidate tokens
     */
    topLogprobs: Candidate[];
};
/**
 * State object for Token Probabilities
 */
export type LogprobsState = {
    /**
     * Log probabilities for
     * currently-selected token.
     */
    selectedTokenLogprobs: TokenLogprobs | null;
    /**
     * Log probabilities for
     * each message, keyed by message hash.
     */
    messageLogprobs: Map<number, MessageLogprobData>;
};
//# sourceMappingURL=logprobs.d.ts.map